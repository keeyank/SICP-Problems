(Define (square x) (* x x))
(define (cube x) (* x x x))
(define (average a b) (/ (+ a b) 2))
(define (average3 a b c) (/ (+ a b c) 3))
(define (abs a) (if (< a 0) (- a) a))
(define (sign a) (if (< a 0) -1 1))
(define (div a b) (truncate (/ a b)))
(define (inc n) (+ n 1))

(define (<= a b) (not (> a b)))
(define (>= a b) (not (< a b)))
(define (!= a b) (not (= a b)))

(define (even? n) (= (remainder n 2) 0))
(define (same-parity? a b) (= (remainder a 2)
			      (remainder b 2)))

(define (accumulate op init l)
  (if (null? l)
      init
      (op (car l) (accumulate op init (cdr l)))))

;;;SECTION 2.3.3

;; representing

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

;; decoding
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))

;; sets

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (min set) (car set))
(define (second-min set) (cadr set))
(define (two-less set) (cddr set))
(define (length seq)
  (accumulate (lambda (x y) (+ y 1)) 0 seq))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))


;; EXERCISE 2.67

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
                                   (make-leaf 'C 1)))))

(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(define decoded-message (decode sample-message sample-tree))


;; EXERCISE 2.68

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (encode-symbol sym tree)
  (define (enc-sym tree)
    ; Assert: sym is in the set (symbols tree)
    (cond ((leaf? tree) '())
	  ((element-of-set? sym
			    (symbols (left-branch tree)))
	   (cons '0 (enc-sym (left-branch tree))))
	  (else
	   (cons '1 (enc-sym (right-branch tree))))))
  (if (element-of-set? sym (symbols tree))
      (enc-sym tree)
      (error "Error: Symbol not in huffman tree")))

;; EXERCISE 2.69

(define (generate-huffman-tree pairs)
  (define (successive-merge tree-set)
    ;; Assert: N(tree-set) >= 2
    (let ((min1 (min tree-set))
	  (min2 (second-min tree-set))
	  (smaller-tree-set (two-less tree-set)))
      (let ((next-tree-set (adjoin-set
			    (make-code-tree min1
					    min2)
			    smaller-tree-set)))
	(if (= (length next-tree-set) 1)
	    (min next-tree-set)
	    (successive-merge next-tree-set)))))
  (successive-merge (make-leaf-set pairs))))

(define pairs (list (list 'A 4) (list 'B 2) (list 'C 1)
		    (list 'D 1)))
(define initial-leafs (make-leaf-set pairs))
(two-less initial-leafs)
(min initial-leafs)
(second-min initial-leafs)

(define huff-tree (generate-huffman-tree pairs))
(define encoded (encode '(A B C D) huff-tree))
(decode encoded huff-tree)
