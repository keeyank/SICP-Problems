(define (square x) (* x x))
(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (define (find-divisor test-divisor)
    (cond ((> (square test-divisor) n) n)
	  ((divides? test-divisor n) test-divisor)
	  (else (find-divisor (+ test-divisor 1)))))
  (= n (find-divisor 2)))

(define (timed-prime-test n)
  (define (start-prime-test start-time)
    (if (prime? n)
	(- (runtime) start-time)
        "non-prime"))
  (newline)
  (display n)
  (display " *** ")
  (display (start-prime-test (runtime))))

(define (search-for-primes a b)
  (timed-prime-test a)
  (if (or (> b a) (= b a))
      (search-for-primes (+ a 1) b)))
  
