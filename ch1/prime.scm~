(define (square x) (* x x))
(define (divides? a b)
  (= (remainder b a) 0))
(define (even? n)
  (= (remainder n 2) 0))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
      		    m))
	(else
         (remainder (* base (expmod base (- exp 1) m))
		    m))))

(define (prime? n)
  (define (next n)
    (if (divides? 2 n)
	(+ n 1)
	(+ n 2)))
  (define (find-divisor test-divisor)
    (cond ((> (square test-divisor) n) n)
	  ((divides? test-divisor n) test-divisor)
	  (else (find-divisor (next test-divisor)))))
  (= n (find-divisor 2)))

(define (fast-prime? n times)
  (define (fermat-test)
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
  (define (fast-prime?-itr times)
    (cond ((= times 0) true)
	  ((fermat-test) (fast-prime?-itr (- times 1)))
	  (else false)))
  (fast-prime?-itr times))

(define (timed-prime-test n)
  (define (start-prime-test start-time)
    (if (fast-prime? n 10)
	(- (runtime) start-time)
        "non-prime"))
  (newline)
  (display n)
  (display " *** ")
  (display (start-prime-test (runtime))))

(define (search-for-primes a b)
  (timed-prime-test a)
  (if (or (> b a) (= b a))
      (search-for-primes (+ a 1) b)))

(define (carmichael-test n)
  (define (carm-itr m)
    (cond ((= m 0) true)
	  ((= m (expmod m n n)) (carm-itr (- m 1)))
	  (else false)))
  (carm-itr n))
	
