(define (square x) (* x x))
(define (cube x) (* x x x))
(define (average a b) (/ (+ a b) 2))
(define (abs a) (if (< a 0) (- a) a))
(define (div a b) (truncate (/ a b)))
(define (inc n) (+ n 1))

(define (fixed-point f first-guess)
  (define tolerance 0.00001)
  (define (close-enough? a b)
    (< (abs (- a b)) tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))


(define (deriv g)
  (define dx 0.000001)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))

(define (newtons-method g guess)
  (define (newton-transform x)
    (- x (/ (g x) ((deriv g) x))))
  (fixed-point newton-transform guess))

(define (sqrt x)
  (newtons-method (lambda (y) (- (square y) x))
		  1.))

(define (cubic a b c)
  (lambda (x)
    (+ (cube x)
       (* a (square x))
       (* b x)
       c)))


(define (double pro)
  (lambda (x)
    (pro (pro x))))
((double (lambda (x) (* x 2))) 1)
((double sqrt) 81)
((double sqrt) 16)
(((double (double double)) inc) 5)

(define (compose f g)
  (lambda (x)
    (f (g x))))
(define (square-then-inc) (compose inc square))
((square-then-inc) 2)
((compose square inc) 2)
((compose (lambda (x) (* x 3)) (lambda (x) (+ x 2))) 4)

(define (double pro) (compose pro pro))
  
