(define (square x) (* x x))
(define (cube x) (* x x x))
(define (average a b) (/ (+ a b) 2))
(define (average3 a b c) (/ (+ a b c) 3))
(define (abs a) (if (< a 0) (- a) a))
(define (sign a) (if (< a 0) -1 1))
(define (div a b) (truncate (/ a b)))
(define (inc n) (+ n 1))

(define (<= a b) (not (> a b)))
(define (>= a b) (not (< a b)))
(define (!= a b) (not (= a b)))

(define (even? n) (= (remainder n 2) 0))
(define (same-parity? a b) (= (remainder a 2)
			      (remainder b 2)))

(define l1 (list 1 2 3 4 5 6))

(define (last-pair l)
  (if (null? (cdr l))
      (car l)
      (last-pair (cdr l))))

(define (reverse l)
  (define (rev old new)
    (if (null? old)
	new
	(rev (cdr old) (cons (car old) new))))
  (rev (cdr l) (list (car l))))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (null? kinds-of-coins)) 0)
        (else (+ (cc amount
                     (cdr kinds-of-coins))
                 (cc (- amount
                        (car kinds-of-coins))
                     kinds-of-coins)))))

(define us-coins (list 50 25 10 5 1))
					; (cc 100 us-coins) is equal to (cc 100 (reverse us-coins)). Order of the list doesn't matter! This is because the tree recursion makes it so every possible combination of coin types is selected, no matter the order of the coins in the list. The fact that we add the cc call with the reduced kinds-of-coins list to the cc call with the reduced amount ensures this.


(define (same-parity first . l)
  (let ((p (remainder first 2)))
    (define (sp l)
      (cond ((null? l)
	     l)
	    ((same-parity? (car l) p)
	     (cons (car l) (sp (cdr l))))
	    (else
	     (cdr l))))
    (cons first (sp l))))
      
			  
